// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations
// https://www.prisma.io/docs/concepts/components/prisma-schema/relations#relation-fields

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  username        String    @unique @default(cuid())
  provider        String    @default("credentials")
  password        String?
  image           String?
  role            String    @default("user") // user, admin
  accounts        Account[]
  sessions        Session[]
  notes           Note[]
  noteCategories  NoteCategory[]
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Note {
  id         Int            @id @default(autoincrement())
  title      String
  content    String
  categories NoteCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  userId     String
  user       User           @relation(fields: [userId], references: [id])

  @@map("notes")
}

model NoteCategory {
  id      Int    @id @default(autoincrement())
  name    String @unique
  notes   Note[]
  userId  String
  user    User @relation(fields: [userId], references: [id])

  @@map("note-categories")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-tokens")
}